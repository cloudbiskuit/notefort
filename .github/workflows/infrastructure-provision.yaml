name: Infrastructure - Provision

on:
  workflow_dispatch:
  push:
    paths:
      - 'operations/terraform/*'

permissions:
  id-token: write
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest

    env:
      BUCKET_ASM_PARAMETER_NAME: "notefort-bucket-name"
      DYNAMODB_TABLE_NAME: "notefort-locks"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Fetch Bucket Name from ASM
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name $BUCKET_ASM_PARAMETER_NAME --query "Parameter.Value" --output text)
          echo "BUCKET_NAME=${BUCKET_NAME}" >> $GITHUB_ENV

      - name: Create backend.tf file dynamically
        run: |
          BACKEND_FILE="./operations/terraform/backend.tf"
          truncate -s 0 $BACKEND_FILE
          cat <<EOT > $BACKEND_FILE
          terraform {
            backend "s3" {
              bucket = "${BUCKET_NAME}"
              key    = "terraform.tfstate"
              region = "${{ secrets.AWS_REGION }}"
              dynamodb_table = "${DYNAMODB_TABLE_NAME}"
            }
          }
          EOT

      - name: Provision Infrastructure
        run: |
          cd ./operations/terraform
          terraform init
          terraform apply -auto-approve -var "aws_region=${{ secrets.AWS_REGION }}"

          echo "INFRASTRUCTURE PROVISIONED SUCCESSFULLY"

  iam-eks-map:
    needs: main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Set up Kubeconfig
        run: |
          eksctl utils write-kubeconfig --region ${{ secrets.AWS_REGION }} --cluster ${{ vars.EKS_CLUSTER_NAME }}

      - name: Add IAM User to Kubernetes ConfigMap
        run: |
          kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml
          yq eval '.data.mapUsers += "- userarn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:user/${{ secrets.AWS_USER }}\n  username: ${{ secrets.AWS_USER }}\n  groups:\n    - system:masters"' aws-auth.yaml > updated-aws-auth.yaml
          kubectl apply -f updated-aws-auth.yaml
          kubectl get configmap aws-auth -n kube-system -o yaml

          echo "IAM USER MAPPED TO KUBERNETES CONFIGMAP SUCCESSFULLY"

  autoscaler-setup:
    needs: main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Set up Kubeconfig
        run: |
          eksctl utils write-kubeconfig --region ${{ secrets.AWS_REGION }} --cluster ${{ vars.EKS_CLUSTER_NAME }}

      - name: Add Cluster Autoscaler Helm repo & Update Helm Repos
        run: |
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo update

      - name: Install Cluster Autoscaler

        run: |
          helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
            --namespace kube-system \
            --set autoDiscovery.clusterName="${{ vars.EKS_CLUSTER_NAME }}" \
            --set awsRegion="${{ secrets.AWS_REGION }}" \
            --set extraArgs.balance-similar-node-groups=true \
            --set extraArgs.scale-down-enabled=true \
            --set extraArgs.skip-nodes-with-local-storage=true

          echo "CLUSTER AUTOSCALER INSTALLED SUCCESSFULLY"

      - name: Add Metrics Server Helm Repo & Update Helm Repos
        run: |
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update

      - name: Install Metrics Server
        run: |
          helm upgrade --install metrics-server metrics-server/metrics-server \
            --namespace kube-system \
            --set args="{--kubelet-insecure-tls}"

          echo "METRICS SERVER INSTALLED SUCCESSFULLY"

      - name: Add Vertical Pod Autoscaler (VPA) Helm repo & Update Helm Repos
        run: |
          helm repo add fairwinds-stable https://charts.fairwinds.com/stable
          helm repo update

      - name: Install Vertical Pod Autoscaler (VPA)
        run: |
          helm upgrade --install vpa fairwinds-stable/vpa \
            --namespace kube-system \
            --set updater.enabled=true \
            --set recommender.enabled=true \
            --set admissionController.enabled=false
          
          echo "VERTICAL POD AUTOSCALER INSTALLED SUCCESSFULLY"

  monitoring-setup:
    needs: main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Set up Kubeconfig
        run: |
          eksctl utils write-kubeconfig --region ${{ secrets.AWS_REGION }} --cluster ${{ vars.EKS_CLUSTER_NAME }}

      - name: Create Monitoring Namespace (if not exists)
        run: |
          kubectl create namespace monitoring || echo "Namespace 'monitoring' already exists"

      - name: Add Prometheus Helm Repo & Update Helm Repos
        run: | 
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Install Prometheus Operator
        run: |
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set prometheus.nodeSelector.nodegroup=private \
            --wait
          
          echo "PROMETHEUS OPERATOR INSTALLED SUCCESSFULLY"

      - name: Install Prometheus Adapter
        run: |
          PROMETHEUS_URL="http://prometheus-kube-prometheus-prometheus.monitoring"
          
          helm upgrade --install prometheus-adapter prometheus-community/prometheus-adapter \
            --namespace monitoring \
            --set prometheus.url="$PROMETHEUS_URL" \
            --wait
          
          echo "PROMETHEUS ADAPTER INSTALLED SUCCESSFULLY"

  ArgoCD-setup:
    needs: main
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Set up Kubeconfig
        run: |
          eksctl utils write-kubeconfig --region ${{ secrets.AWS_REGION }} --cluster ${{ vars.EKS_CLUSTER_NAME }}

      - name: Add Argo Helm Repo & Update Repos
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Create ArgoCD Namespace (if not exists)
        run: |
          kubectl create namespace argocd || echo "Namespace 'argocd' already exists"

      - name: Install ArgoCD using Helm
        run: |
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd
          echo "ARGOCD INSTALLED SUCCESSFULLY"