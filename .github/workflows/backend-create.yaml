name: Backend - Create

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    env:
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |        
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Serverless Framework and Plugin
        run: |
          npm install -g serverless@3
          npm install --save-dev serverless-python-requirements

      - name: First Deployment (Authorizer with Dummy Auth0 API Identifier/Audience)
        run: |
          serverless deploy

      - name: Wait for CloudFormation Stack Creation to Complete
        run: |
          aws cloudformation wait stack-create-complete --stack-name backend-dev
          echo "CloudFormation Stack Creation Complete."

      - name: Fetch API Gateway URL
        run: |
          API_URL=$(aws apigatewayv2 get-apis --query "Items[?contains(Name, 'backend')].ApiEndpoint" --output text)
          
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "Fetched API Gateway URL: $API_URL"

      - name: Set GitHub Secret for API Gateway URL
        run: |
          echo "${{ secrets.GH_PAT_SECRETS }}" | gh auth login --with-token
          gh secret set API_URL --body "$API_URL"

      - name: Update Authorizer Audience with the new API Gateway URL in serverless.yaml
        run: |
          sed -i "s|https://temp-placeholder.com|$API_URL|g" serverless.yaml

      - name: Create "NOTEFORT-API" AUTH0 API With Fetched API URL
        run: |
          # Generate a JWT token from "MGMT_APP" Auth0 Management APP 
          AUTH0_MANAGEMENT_API_TOKEN=$(curl --request POST \
            --url https://${{ secrets.AUTH0_DOMAIN }}/oauth/token \
            --header 'Content-Type: application/json' \
            --data '{"grant_type":"client_credentials","client_id":"${{ secrets.AUTH0_MANAGEMENT_CLIENT_ID }}","client_secret":"${{ secrets.AUTH0_MANAGEMENT_CLIENT_SECRET }}","audience":"https://${{ secrets.AUTH0_DOMAIN }}/api/v2/"}' | jq -r .access_token)
          
          # Create a new "NOTEFORT-API" Auth0 API
          AUTH0_API_ID=$(curl --request POST \
            --url https://${{ secrets.AUTH0_DOMAIN }}/api/v2/resource-servers \
            --header "authorization: Bearer $AUTH0_MANAGEMENT_API_TOKEN" \
            --header 'content-type: application/json' \
            --data '{
              "identifier": "${{ env.API_URL }}",
              "name": "NOTEFORT-API",
              "scopes": [
                {
                  "value": "admin:ressources",
                  "description": "Allows creation of backend resources."
                }
              ],
              "token_dialect": "access_token_authz"
            }' | jq -r .id)

          echo "AUTH0_API_ID=$AUTH0_API_ID" >> $GITHUB_ENV

          echo "Auth0 API created with ID: $AUTH0_API_ID"

      - name: Create "NOTEFORT-APP" AUTH0 Application and Authorize The Newly Created API
        run: |
          # Fetch the Auth0 Management API token
          AUTH0_MANAGEMENT_API_TOKEN=$(curl --request POST \
            --url https://${{ secrets.AUTH0_DOMAIN }}/oauth/token \
            --header 'Content-Type: application/json' \
            --data '{"grant_type":"client_credentials","client_id":"${{ secrets.AUTH0_MANAGEMENT_CLIENT_ID }}","client_secret":"${{ secrets.AUTH0_MANAGEMENT_CLIENT_SECRET }}","audience":"https://${{ secrets.AUTH0_DOMAIN }}/api/v2/"}' | jq -r .access_token)

          # Create a new "NOTEFORT-APP" Auth0 application
          AUTH0_APP_DATA=$(curl --request POST \
            --url https://${{ secrets.AUTH0_DOMAIN }}/api/v2/clients \
            --header "authorization: Bearer $AUTH0_MANAGEMENT_API_TOKEN" \
            --header 'content-type: application/json' \
            --data '{
              "name": "NOTEFORT-APP",
              "grant_types": ["client_credentials"],
              "app_type": "non_interactive"
            }')

          AUTH0_CLIENT_ID=$(echo "$AUTH0_APP_DATA" | jq -r .client_id)
          AUTH0_CLIENT_SECRET=$(echo "$AUTH0_APP_DATA" | jq -r .client_secret)

          echo "AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID" >> $GITHUB_ENV
          echo "AUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET" >> $GITHUB_ENV
          
          echo "Auth0 Application created with Client ID: $AUTH0_CLIENT_ID"

          # Authorize the newly created API with the application by creating a client grant
          CLIENT_GRANT_RESPONSE=$(curl --request POST \
            --url https://${{ secrets.AUTH0_DOMAIN }}/api/v2/client-grants \
            --header "authorization: Bearer $AUTH0_MANAGEMENT_API_TOKEN" \
            --header 'content-type: application/json' \
            --data "{
              \"client_id\": \"$AUTH0_CLIENT_ID\",
              \"audience\": \"${API_URL}\",
              \"scope\": [\"admin:ressources\"]
            }")
  
          echo "Client Grant Response: $CLIENT_GRANT_RESPONSE"

      - name: Set GitHub Secrets for Auth0 Client ID and Secret
        run: |
          echo "${{ secrets.GH_PAT_SECRETS }}" | gh auth login --with-token
          gh secret set AUTH0_CLIENT_ID --body "$AUTH0_CLIENT_ID"
          gh secret set AUTH0_CLIENT_SECRET --body "$AUTH0_CLIENT_SECRET"

      - name: Second Deployment (Authorizer with Actual Auth0 API Identifier/Audience)
        run: |
          serverless deploy

      - name: Wait for CloudFormation Stack Update to Complete
        run: |
          aws cloudformation wait stack-update-complete --stack-name backend-dev
          echo "CloudFormation Stack Update Complete."

      - name: Fetch Auth0 Access Token
        run: |
          AUTH0_CLIENT_ID=${{ env.AUTH0_CLIENT_ID }}
          AUTH0_CLIENT_SECRET=${{ env.AUTH0_CLIENT_SECRET }}
          API_URL=${{ env.API_URL }}

          AUTH0_ACCESS_TOKEN=$(curl --request POST \
            --url https://$AUTH0_DOMAIN/oauth/token \
            --header 'Content-Type: application/json' \
            --data '{"grant_type":"client_credentials","client_id":"'$AUTH0_CLIENT_ID'","client_secret":"'$AUTH0_CLIENT_SECRET'","audience":"'$API_URL'"}')
          
          echo "AUTH0_ACCESS_TOKEN=$(echo $AUTH0_ACCESS_TOKEN | jq -r .access_token)" >> $GITHUB_ENV

      - name: Invoke Lambda Function
        run: |
          API_URL=${{ env.API_URL }}
          AUTH0_ACCESS_TOKEN=${{ env.AUTH0_ACCESS_TOKEN }}

          curl --request POST \
              --url "$API_URL/create-backend" \
              --header "Authorization: Bearer $AUTH0_ACCESS_TOKEN" \
              --data '{}'
