name: Artifacts - Build

on:
  workflow_dispatch:
  push:
    paths:
      - 'application/**'

permissions:
  id-token: write
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.GH_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Fetch full history
        run: git fetch --unshallow

      - name: Get List of Changed Services
        run: |
          # Compare the ./application codebase between the last commit and the current commit
          CHANGED_SERVICES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^application/' | cut -d'/' -f2 | sort | uniq | tr '\n' ' ')
          echo "Changed services: $CHANGED_SERVICES"
          echo "changed_services=${CHANGED_SERVICES}" >> $GITHUB_ENV

      - name: Build Tag and Push Changed Services ONLY
        run: |
          TAG=$(git rev-parse --short HEAD)
          PREFIX="notefort-"
          CHANGED_SERVICES="${{ env.changed_services }}"
          LATEST_TAG="latest"

          # Ensure CHANGED_SERVICES is not empty
          if [[ -z "$CHANGED_SERVICES" ]]; then
            echo "No services changed, skipping build."
            exit 0
          fi

          # Loop through each service and build, tag, and push the Docker image
          for SERVICE in $CHANGED_SERVICES; do
            ECR_REPO_NAME="${PREFIX}${SERVICE}"
            IMAGE_NAME="$ECR_REPO_NAME"
            ECR_REPO_URL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPO_NAME"

            # Check if repo exists, create if not
            if ! aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region ${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
              aws ecr create-repository --repository-name $ECR_REPO_NAME --region ${{ secrets.AWS_REGION }}
              echo "Repository $ECR_REPO_NAME created successfully"
            fi

            # Build the Docker image
            docker build -t $IMAGE_NAME:$TAG -t $IMAGE_NAME:$LATEST_TAG ./application/$SERVICE

            # Tag the image
            docker tag "$IMAGE_NAME:$TAG" "$ECR_REPO_URL:$TAG"
            docker tag "$IMAGE_NAME:$LATEST_TAG" "$ECR_REPO_URL:$LATEST_TAG"

            # Push both tags
            docker push "$ECR_REPO_URL:$TAG"
            docker push "$ECR_REPO_URL:$LATEST_TAG"

            echo "Image $IMAGE_NAME:$TAG and $IMAGE_NAME:$LATEST_TAG pushed successfully"
          done