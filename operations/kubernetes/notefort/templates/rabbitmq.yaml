apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: private
                operator: In
                values:
                - "true"
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        ports:
        - containerPort: 5672
        - containerPort: 15672
        volumeMounts:
        - name: rbtvol
          mountPath: /var/lib/rabbitmq 
        resources:
          requests:
            cpu: "250m"      
            memory: "256Mi" 
          limits:
            cpu: "500m"      
            memory: "512Mi"  
        livenessProbe:
          exec:
            command: ["rabbitmqctl", "node_health_check"]
          initialDelaySeconds: 20
          periodSeconds: 30
          timeoutSeconds: 5
      volumes:
      - name: rbtvol
        persistentVolumeClaim:
          claimName: notefort-rbtvol-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: notefort-rbtvol-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: notefort-rbtvol-sc 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: notefort-rbtvol-sc
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp3
  fsType: ext4
  encrypted: "true"
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
  - protocol: TCP
    port: 5672
    targetPort: 5672
    name: amqp
  - protocol: TCP
    port: 15672
    targetPort: 15672
    name: management
  type: ClusterIP